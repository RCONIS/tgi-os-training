---
title: "1. TGI model with `jmpost` (SF)"
author:
  - Daniel Sabanés Bové
  - Francois Mercier
date: last-modified
editor_options: 
  chunk_output_type: inline
format:
  html:
    code-fold: show
math: true
---

Let's try to fit the same model now with `jmpost`. We will use the same data as in the previous notebook.

## Setup and load data

{{< include _setup_and_load.qmd >}}

{{< include _load_data.qmd >}}

For simplicity, we will for now just use studies 1 and 3 (Atezolizumab in NSCLC), and we rename the patient IDs:

```{r}
df <- tumor_data |> 
  filter(study %in% c("1", "3")) |> 
  na.omit() |>
  droplevels() |> 
  mutate(id = factor(as.numeric(id)))
```

## Data preparation

We start with the subject level data set.
In this case we want to treat all observations as if they come from a single arm and single study for now. Therefore we insert constant study and arm values here.

```{r}
subj_df <- data.frame(
  id = unique(df$id),
  arm = "arm",
  study = "study"
)
subj_data <- DataSubject(
  data = subj_df,
  subject = "id",
  arm = "arm",
  study = "study"
)
```

Next we prepare the longitudinal data object.

```{r}
long_df <- df |>
  select(id, day, sld)
long_data <- DataLongitudinal(
  data = long_df,
  formula = sld ~ day
)
```

Now we can create the `JointData` object:

```{r}
joint_data <- DataJoint(
    subject = subj_data,
    longitudinal = long_data
)
```

## Model specification

Here we just want to fit the longitudinal data, therefore:

```{r}
tgi_mod <- JointModel(
    longitudinal = LongitudinalSteinFojo(
        mu_bsld = prior_normal(log(39), 1),
        mu_ks = prior_normal(log(0.01), 0.1),
        mu_kg = prior_normal(log(0.001), 1),
        omega_bsld = prior_lognormal(log(25), 1),
        omega_ks = prior_lognormal(log(0.1), 1),
        omega_kg = prior_lognormal(log(1), 0.5),
        sigma = prior_lognormal(log(0.1), 1)
    )
)
```

## Fit model

We can now fit the model using `jmpost`. 

```{r}
save_file <- here("session-tgi/jm1.RData")
if (file.exists(save_file)) {
  load(save_file)
} else {
  mcmc_results <- sampleStanModel(
      tgi_mod,
      data = joint_data,
      iter_sampling = ITER,
      iter_warmup = WARMUP,
      chains = CHAINS,
      parallel_chains = CHAINS,
      seed = BAYES.SEED,
      refresh = REFRESH,
      thin = THIN
  )
  save(mcmc_results, file = save_file)
}
```

Let's check the convergence with a few parameters:

```{r}
vars <- c(
    "lm_sf_mu_bsld",
    "lm_sf_mu_ks",
    "lm_sf_mu_kg",
    "lm_sf_sigma"
)
cmdstanr::as.CmdStanMCMC(mcmc_results)$summary(vars)
```

Unfortunately that does not look good, because the `rhat` values are far above 1.
Let's check traceplots for these:

```{r}
vars_draws <- cmdstanr::as.CmdStanMCMC(mcmc_results)$draws(vars)
mcmc_trace(vars_draws)
```
